#!/usr/bin/env python3

import signal, sys

from argparse import ArgumentParser, FileType
from re import compile as re_compile

from Bio import SeqIO


def main(args=None):
    if args is None:
        args = sys.argv[1:]

    try:
        signal.signal(signal.SIGPIPE, signal.SIG_DFL)
    except ValueError:
        pass

    parser = ArgumentParser(description='search sequences using a provided regular expression')
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-i', '--id',  type=re_compile)
    group.add_argument('-s', '--seq', type=re_compile)
    parser.add_argument('input',  nargs='?', type=FileType('r'), default=sys.stdin)
    parser.add_argument('output', nargs='?', type=FileType('w'), default=sys.stdout)

    ns = parser.parse_args(args)

    seqs = SeqIO.parse(ns.input, 'fasta')

    if ns.id is not None:
        grepped = (s for s in seqs if ns.id.search(str(s.id)))
    else:
        grepped = (s for s in seqs if ns.seq.search(str(s.seq)))

    SeqIO.write(grepped, ns.output, 'fasta')

    return 0


if __name__ == '__main__':
    sys.exit(main())
