#!/usr/bin/env python3

import signal, sys

from argparse import ArgumentParser, FileType

from Bio import SeqIO


class Orderable(object):
    def __init__(self, sr):
        for i in range(len(sr.seq)):
            if sr.seq[i] != '-':
                break
        self.g = i // 3
        self.id = sr.id
    def __eq__(self, other):
        return self.g == other.g and self.id == other.id
    def __ne__(self, other):
        return self.g != other.g or self.id != other.id
    def __lt__(self, other):
        return self.g < other.g or (self.g == other.g and self.id < other.id)
    def __le__(self, other):
        return self.g < other.g or (self.g == other.g and self.id <= other.id)
    def __gt__(self, other):
        return self.g > other.g or (self.g == other.g and self.id > other.id)
    def __ge__(self, other):
        return self.g > other.g or (self.g == other.g and self.id >= other.id)


def main(args=None):
    if args is None:
        args = sys.argv[1:]

    try:
        signal.signal(signal.SIGPIPE, signal.SIG_DFL)
    except ValueError:
        pass

    parser = ArgumentParser(description='reorder alignment based on starting positions')
    parser.add_argument('input',  nargs='?', type=FileType('r'), default=sys.stdin)
    parser.add_argument('output', nargs='?', type=FileType('w'), default=sys.stdout)

    ns = parser.parse_args(args)

    SeqIO.write(sorted((r for r in SeqIO.parse(ns.input, 'fasta')), key=Orderable), ns.output, 'fasta')

    return 0


if __name__ == '__main__':
    sys.exit(main())
